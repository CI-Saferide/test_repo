node('Build'){    
    stage('Identify trigger') {
        
	checkout([$class: 'GitSCM', branches: [[name: '**/pull/**']],
    doGenerateSubmoduleConfigurations: false,
    extensions: [],
    submoduleCfg: [],
    userRemoteConfigs: [[credentialsId: 'CI_user',
    refspec: '+refs/pull/*:refs/remotes/origin/pull/*',
//    refspec: '+refs/pull-requests/*:refs/remotes/origin/*',
    url: 'https://github.com/CI-Saferide/test_repo.git']]])

    echo 'triggerd'
//	checkout([$class: 'GitSCM', branches: [[name: '*/tags/*']], doGenerateSubmoduleConfigurations: false, extensions: [],
//         submoduleCfg: [], userRemoteConfigs: [
//         [credentialsId: 'CI_user', refspec: '+refs/tags/*:refs/remotes/origin/tags/*', url: 'https://github.com/CI-Saferide/test_repo.git']
//         ]])

//		
//	      env.GIT_TAG = sh(returnStdout: true, script: 'git describe --tags --abbrev=0' ).trim()
//        echo GIT_TAG

//        env.GIT_BRANCH = sh(returnStdout: true, script: "git branch --contains ${GIT_TAG} " ).trim()
//        echo "git branch = ${GIT_BRANCH}"
    }

    
}// end of node('build')


//this method send email with build result
def emailExt () {
     emailext (body: '''${SCRIPT, template="buildlog.template"}''',
        mimeType: 'text/html',
        subject: "[Jenkins] - Build ${currentBuild.currentResult}",
        to: "${MailRecipients}",
        replyTo: "${MailRecipients}",
        recipientProviders: [[$class: 'CulpritsRecipientProvider']])

 } 
// this method run shell command with ascii plugin
def runCommand ( command ) {
    ansiColor('xterm'){
        if(isUnix()){
        sh command
        } else {
            bat command
        }
    }
} 


